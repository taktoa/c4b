func count_down(x', y') local (a)
  (
{ T }
    a = x';
    if a > y'
      (
{ -a + y' + 1 ≤ 0 /\ -a + x' ≤ 0 /\ a - x' ≤ 0 }
        a -= 1;
{ -a + y' ≤ 0 /\ -a + x' - 1 ≤ 0 /\ a - x' + 1 ≤ 0 }
        a = count_up(a, y');
        return a
{ 1 ≤ 0 }
      )
    else
{ a - y' ≤ 0 /\ -a + x' ≤ 0 /\ a - x' ≤ 0 }
      return a
{ 1 ≤ 0 }
  );
func count_up(x'', y'') local (a')
  (
{ T }
    a' = y'';
    if a' + 1 < x''
      (
{ a' - x'' + 2 ≤ 0 /\ -a' + y'' ≤ 0 /\ a' - y'' ≤ 0 }
        a' += 2;
{ a' - x'' ≤ 0 /\ -a' + y'' + 2 ≤ 0 /\ a' - y'' - 2 ≤ 0 }
        a' = count_down(x'', a');
        return a'
{ 1 ≤ 0 }
      )
    else
{ -a' + x'' - 1 ≤ 0 /\ -a' + y'' ≤ 0 /\ a' - y'' ≤ 0 }
      return a'
{ 1 ≤ 0 }
  );

{ T }
x = count_down(y, z);
loop
  (
{ T }
    if x <= t
{ -t + x ≤ 0 }
      break;
    x -= 1
{ t - x ≤ 0 }
  )
{ -t + x ≤ 0 }
